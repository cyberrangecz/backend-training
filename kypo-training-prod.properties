## server ip address, e.g., localhost (127.0.0.1)
server.ipaddress=localhost
## server port for a given service, e.g., 8083
server.port=8083
## server context path (the base url for the service), e.g., /kypo-rest-training/api/v1
server.servlet.context-path=/kypo-rest-training/api/v1
## server protocol used for communication, e.g., http or https
server.protocol=https
## microservice name which is used in user management service for identification of this service, e.g. kypo-training
microservice.name=kypo-training

## calling user-and-group project, e.g., https://localhost:8084/kypo-rest-user-and-group/api/v1
user-and-group-server.uri={URI to user-and-group microservice}

## calling openstack project, e.g., http://localhost:8080/kypo-openstack/api/v1 
openstack-server.uri={URI to Openstack microservice}

## Allows you to specify allowed origins for CORS mapping. You could set it as, e.g., http://domain1.com, http://domain2.com, etc. The default value is: *
cors.allowed.origins={CORS allowed origins}

# OpenID Connect (OIDC) configuration settings for a resource servers configuration
## Allowed OIDC provider, e.g. MUNI OIDC and another proprietary OIDC provider, e.g., https://oidc.muni.cz/oidc/, https://kypo-oidc-idp.cz/oidc/
kypo.identity.providers[0].issuer={OIDC provider - URL}
## Endpoint used to retrieve details about the logged-in user from OIDC provider. This is optional. If not provided,
## the user info endpoint is retrieved from the well known OpenID configuration endpoint.
kypo.identity.providers[0].userInfoEndpoint={OIDC provider - user info URL}
## To add other OIDC providers add the same configuration with the incrementally higher indexes
## kypo.identity.providers[1].issuer=
## kypo.identity.providers[1].userInfoEndpoint=

# spring cloud
spring.cloud.refresh.enabled = false

# Datasource configuration
## URL to the database, e.g., jdbc:postgresql://localhost:5432/training
spring.datasource.url={database URL including port and database table name}
## username in DB, e.g., postgres
spring.datasource.username={user in DB}
## password in DB, e.g., postgres
spring.datasource.password={password for user in DB}

# Java Persistence API settings
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
## database platform (MySQL, PostgtreSQL etc.), e.g., org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.database-platform={database dialect}
## influence how the schema tool management will manipulate the database schema at startup, e.g., validate or none for production purposes
spring.jpa.hibernate.ddl-auto=validate
## show sql in console/file etc. that are invoked, e.g., false or true
spring.jpa.show-sql=false
## possibility to format shown sql commands, if false it is shown in one line if true it is on more lines
spring.jpa.properties.hibernate.format_sql=false

## disables the settings in application.properties in resource folder
spring.jmx.enabled=false

# Elasticsearch settings
## communication protocol for Elasticsearch, e.g. http or https
elasticsearch.protocol=http
## IP address where Elasticsearch is running, e.g. localhost
elasticsearch.host=localhost
## Port on which Elasticsearch is running, e.g. 9200 is default
elasticsearch.port=9200

## overwrite default logback configuration file, e.g., /etc/kypo/logback.xml, NOT REQUIRED
#logging.config={path to logback config file}
## set logger levels using pattern logging.level.<logger-name>=<level>, NOT REQUIRED
logging.level.cz.muni.ics=WARN
kypo.audit.syslog.host=localhost
kypo.audit.syslog.port=514
kypo.audit.messages.format=kypo-training --- KYPO_PORTAL_EVENTS_AUDIT [%thread] %logger{5} --- %msg%n

## Allows migrations during startup of the application using the flyway. Default value is true.
spring.flyway.enabled=false
